minikube start
minikube stop
minikube ssh
minikube ip //ip externa del cluster k8s

// instala curl en el pod
apk add -U curl

kubectl run --generator=run-pod/v1 podtest2 --image=nginx:alpine
// crea pod temporal y ejecuta sh (shell)
kubectl run --rm -ti --generator=run-pod/v1 podtest3 --image=nginx:alpine -- sh
kubectl label pods podtest2 app=front

kubectl get all --namespace kube-system

kubectl get pods
kubectl get pods --show-labels
kubectl get pods --namespace docker
kubectl get pods --watch

kubectl get deployment
kubectl get deployment --show-labels
kubectl get rs --show-labels
kubectl get rs -l app=front

kubectl api-resources
kubectl api-versions

kubectl apply -f file.yaml
kubectl apply -f file.yaml --record
kubectl delete -f file.yaml
kubectl delete pod deployment-test-86677fd487-cshnv

kubectl rollout status deployment deployment-test
kubectl rollout history deployment deployment-test
kubectl rollout history deployment deployment-test --revision=3

kubectl describe deployment deployment-test
kubectl describe pod deployment-test-858557b658-7tm6b
kubectl describe svc my-service
kubectl logs backend-k8s-hands-on-7dfffb9c74-wjdxd
kubectl get deployment deployment-test -o yaml
kubectl get rs deployment-test-86677fd487 -o yaml
kubectl get pod deployment-test-86677fd487-hlmg4 -o yaml
kubectl get pods -l app=front -o wide
kubectl get svc -l app=front
kubectl get endpoints
// ejecutar una terminal del pod
kubectl exec -ti nombre-pod -- sh

kubectl annotate deployment.v1.apps/nginx-deployment kubernetes.io/change-cause="image updated to 1.9.1"

kubectl rollout undo deployment deployment-test --to-revision=3

// Namespaces
kubectl create namespace test-ns
kubectl get namespaces --show-labels
kubectl describe namespaces test-ns
// crea un objeto dentro de un namespace
kubectl run --generator=run-pod/v1 podtest3 --image=nginx:alpine --namespace test-ns

// DNS svcName + nsName + svc.cluster.local
curl backend-k8s-hands-on.ci.svc.cluster.local

// Context
kubectl config current-context
kubectl config view
// crear un contexto
kubectl config set-context ci-context --namespace=ci --cluster=docker-desktop --user=docker-desktop
// switch context
kubectl config use-context ci-context

// Ver recursos alocados por un nodo
kubectl describe node docker-desktop 

// Crear un configmap
kubectl create configmap nginx-config --from-file=.\configmaps-examples\nginx.conf
// Get configmaps, describe
kubectl get configmaps
kubectl get cm
kubectl describe configmaps nginx-config
// Crear configmap de varios archivos
kubectl create configmap nginx-config1 --from-file=.\configmaps-examples\

// Crear secret
kubectl create secret generic mysecret --from-file=./secrets-files/test.txt
// get, describe
kubectl get secrets
kubectl describe secrets mysecret   //no muestra el contenido de los secretos.
kubectl delete secrets mysecret
// info parcial del contenido de los secretos (devuelve en base64)
kubectl get secrets mysecret -o yaml 

// Volúmenes: sirven para persistir datos desde un pod
// EmptyDir: vol a nivel de pod, compartido y persistido para todos los contenedores del mismo.
//           existe mientras exista el pod, si muere el pod, tambien se pierden los datos de ese vol.
//           se mantiene si se reinicia el container.
// hostPath: un path dentro del nodo donde está corriendo el pod.
//           no depende de la vida del pod, el problema es que si un pod se inicia en otro nodo, no puede
//           acceder a los mismos datos. Está vinculado directamente al host donde corre el nodo.
// cloud:    un path que referencia a un almacenamiento en la nube.
//           por ejemplo EBS (amazon) o PD (google cloud)
//           lo complejo es q al referenciar el almacenamiento se debe conocer metadata de cada uno,
//           según su tipo y proveedor (ver PVC y PV).


// Docker
// crea un contenedor con golang
// -v expone carpeta del file system al contenedor
// no me anduvo el --net host en entorno windows: docker run --rm -dti -v $PWD/:/go --net host --name golang golang bash
docker run --rm -dti -v $PWD/:/go -p 9090:9090 --name golang golang bash

docker run -d -p 9091:9090 --name k8s-hands-on k8s-hands-on

// lista contenedores
docker ps -l
// elimina un contenedor
docker rm -fv fdd2cc9dc253551963210ebbc2045f662a934915f0813fd727f18cc5246385ce
// ingresar al contenedor
docker exec -ti d736cf46ffadfa91c3e7c824ec235310e2f57c4805eff49d6684925e600d5687 bash  
// Construir la imagen docker 
docker build -t k8s-hands-on -f .\Dockerfile .
// lista las imágenes disponibles
docker images

//image pull policy kubernetes
